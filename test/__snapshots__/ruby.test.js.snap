// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`alias.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

alias a b # first

alias c d

alias $e $f # rubocop:disable Style/GlobalVars
"
`;

exports[`alias.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

alias a b # first

alias c d

alias $e $f # rubocop:disable Style/GlobalVars
"
`;

exports[`array.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

[]

[1, 2, 3]

[\\"a\\", \\"b\\", \\"c\\"]

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_long
  ]
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
] =
  super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

# rubocop:enable Lint/Void
"
`;

exports[`array.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

[]

[1, 2, 3]

['a', 'b', 'c']

%w[a b c]

%i[a b c]

%W[a#{a}a b#{b}a c#{c}c]

%I[a#{a}a b#{b}b c#{c}c]

[1, 2, *[3, 4], 5, 6]

[
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long, [
    super_super_super_super_super_super_super_super_super_super_super_long,
    super_super_super_super_super_super_super_super_super_super_super_long
  ]
]

a[1]

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
]

a[1] = 2

a[
  super_super_super_super_super_super_super_super_super_super_super_super_sulong
] =
  super_super_super_super_super_super_super_super_super_super_super_super_long

a[1] = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

# rubocop:enable Lint/Void
"
`;

exports[`assign.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

# rubocop:disable Style/ParallelAssignment
# We should turn these into sequential statements.

a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *a

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_long, super_super_super_long, super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

a = {
  :a => super_super_super_super_super_super_super_super_super_super_long,
  :b => super_super_super_super_super_super_super_super_super_super_long,
  :c => super_super_super_super_super_super_super_super_super_super_long
}

a = [super_super_super_super_long, super_super_super_super_long].sort

a = { :a => super_super_super_super_long, :b => super_super_super_super_long }
  .sort

a.a = 1

super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_long

# rubocop:enable Lint/UselessAssignment, Style/ParallelAssignment
"
`;

exports[`assign.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

# rubocop:disable Style/ParallelAssignment
# We should turn these into sequential statements.

a = 1

a =
  begin
    2
  end

a, b, c = [1, 2, 3]

a = 1, 2, 3

a, b, c = 1, 2, 3

a, *b = 1, 2, 3

a, *b, c, d = 1, 2, 3

a, * = 1, 2, 3

a = *a

(a, b), c = [1, 2], 3

* = [1, 2, 3]

*, a = [1, 2, 3]

super_super_super_long, super_super_super_long, super_super_super_long =
  super_super_super_super_super_long,
  super_super_super_super_super_long,
  super_super_super_super_super_long

a ||= 1

a ||=
  super_super_super_super_super_super_super_super_super_super_super_super_long

a = [
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_super_super_long
]

a = {
  a: super_super_super_super_super_super_super_super_super_super_long,
  b: super_super_super_super_super_super_super_super_super_super_long,
  c: super_super_super_super_super_super_super_super_super_super_long
}

a = [super_super_super_super_long, super_super_super_super_long].sort

a = { a: super_super_super_super_long, b: super_super_super_super_long }.sort

a.a = 1

super_super_super_long.super_super_super_super_super_super_super_long =
  super_super_super_super_super_super_super_super_super_super_super_long

# rubocop:enable Lint/UselessAssignment, Style/ParallelAssignment
"
`;

exports[`binary.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

a && b && c && d

super_super_super_super_super_long && super_super_super_super_super_long &&
  super_super_super_super_super_long
"
`;

exports[`binary.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

a && b && c && d

super_super_super_super_super_long && super_super_super_super_super_long &&
  super_super_super_super_super_long
"
`;

exports[`blocks.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnusedBlockArgument

loop do
  1
end

loop do
  1
end

loop do
  # foobar
end

port ENV.fetch(\\"PORT\\") do
       3000
     end

test \\"foobar\\" do
  foobar
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  1
end

loop do |i|
  i
end

loop do |*|
  i
end

loop do |(a, b)|
  i
end

loop do |a, (b, c), d, *e|
  i
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_long
end

loop(&:to_s)

loop(&:to_s)

loop do |i|
  i.to_s :db
end

loop do |i, j|
  i.to_s
end

[1, 2, 3].each do |i|
  p i
end

def change
  change_table :foo do
    column :bar
  end
end

# rubocop:disable Lint/AmbiguousBlockAssociation
# We should handle this.

target.method object.map do |arg|
  arg * 2
end

# rubocop:enable Lint/UnusedBlockArgument, Lint/AmbiguousBlockAssociation
"
`;

exports[`blocks.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UnusedBlockArgument

loop do
  1
end

loop do
  1
end

loop do
  # foobar
end

port ENV.fetch('PORT') do
       3000
     end

test 'foobar' do
  foobar
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do
  super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  1
end

loop do |i|
  i
end

loop do |*|
  i
end

loop do |(a, b)|
  i
end

loop do |a, (b, c), d, *e|
  i
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

loop do |i|
  super_super_super_super_super_super_super_super_super_super_long
end

loop(&:to_s)

loop(&:to_s)

loop do |i|
  i.to_s :db
end

loop do |i, j|
  i.to_s
end

[1, 2, 3].each do |i|
  p i
end

def change
  change_table :foo do
    column :bar
  end
end

# rubocop:disable Lint/AmbiguousBlockAssociation
# We should handle this.

target.method object.map do |arg|
  arg * 2
end

# rubocop:enable Lint/UnusedBlockArgument, Lint/AmbiguousBlockAssociation
"
`;

exports[`break.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

[].each do
  break
end

[].each do
  break 1
end

[].each do
  break(1)
end

[].each do
  break 1, 2
end
"
`;

exports[`break.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

[].each do
  break
end

[].each do
  break 1
end

[].each do
  break(1)
end

[].each do
  break 1, 2
end
"
`;

exports[`case.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/EmptyWhen
# Disabling EmptyWhen on account of
# https://github.com/rubocop-hq/rubocop/issues/3696.

# rubocop:disable Style/EmptyCaseCondition
# This is something that we should handle by converting each of the when
# statements into valid if/elsif/else statements.

case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end

# rubocop:enable Lint/EmptyWhen, Style/EmptyCaseCondition
"
`;

exports[`case.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/EmptyWhen
# Disabling EmptyWhen on account of
# https://github.com/rubocop-hq/rubocop/issues/3696.

# rubocop:disable Style/EmptyCaseCondition
# This is something that we should handle by converting each of the when
# statements into valid if/elsif/else statements.

case
when a
  1
end

case a
when b
  1
end

case a
when b, c
  1
end

case a
when b
when c
  1
end

case a
when b
  1
when c
  2
end

case a
when b
  1
else
  2
end

# rubocop:enable Lint/EmptyWhen, Style/EmptyCaseCondition
"
`;

exports[`class.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    # object documentation
    class Object; end

    # second object
    # documentation
    class Object; end

    # third object
    # documentation
    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      # inside class documentation
      attr_accessor :bar
    end

    class << self
      # method documentation
      def method; end

      undef method
    end

    module Prettier; end

    module Prettier; end

    module Prettier
      # inside module documentation
      attr_accessor :foo
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = \\"config\\".freeze

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = \\"config\\".freeze
"
`;

exports[`class.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

module Pret
  module Tier
    # object documentation
    class Object; end

    # second object
    # documentation
    class Object; end

    # third object
    # documentation
    class Object
      attr_accessor :foo
    end

    class Object < BasicObject; end

    class Object < BasicObject; end

    class Object < BasicObject
      # inside class documentation
      attr_accessor :bar
    end

    class << self
      # method documentation
      def method; end

      undef method
    end

    module Prettier; end

    module Prettier; end

    module Prettier
      # inside module documentation
      attr_accessor :foo
    end
  end
end

Pret::Tier::Object # rubocop:disable Lint/Void
Pret::TIER = 'config'.freeze

::Pret::Tier::Object # rubocop:disable Lint/Void
::PRET = 'config'.freeze
"
`;

exports[`comments.rb matches expected output for off.json 1`] = `
"# this is a comment at
# the beginning of the file

loop do
  # this is the only statement
  # inside this loop
end

loop do
  # this is the first statement
  # inside this loop
  foo
end

loop do
  foo
  # this is the last statement
  # inside this loop
end

def foo
  # these are the only statements
  # inside this method
end

class Foo
  # these are the only statements
  # inside this class
end

module Foo
  # these are the only statements
  # inside this module
end

module Foo
  class Foo
    def foo
      # this comment is inside a method
    end

    def foo
      print message # this is an inline comment
    end

    def self.foo
      # this comment is inside a self method
    end
  end
end

foo # this is an inline comment
bar # this is another inline comment

[
  # these are comments
  # inside of an array
  foo,
  # inside of an array
  bar
]

{
  :foo =>
    # these are comments
    \\"bar\\",
  :bar =>
    # inside of a hash
    \\"baz\\"
}

foo # inline comment inside of a dot
  .bar

Foo.where(:foo => bar, :bar => baz).to_a.find do |foo|
  # This is a comment
  foo.foo == bar.foo
end

# this is a comment
# at the end of the file
"
`;

exports[`comments.rb matches expected output for on.json 1`] = `
"# this is a comment at
# the beginning of the file

loop do
  # this is the only statement
  # inside this loop
end

loop do
  # this is the first statement
  # inside this loop
  foo
end

loop do
  foo
  # this is the last statement
  # inside this loop
end

def foo
  # these are the only statements
  # inside this method
end

class Foo
  # these are the only statements
  # inside this class
end

module Foo
  # these are the only statements
  # inside this module
end

module Foo
  class Foo
    def foo
      # this comment is inside a method
    end

    def foo
      print message # this is an inline comment
    end

    def self.foo
      # this comment is inside a self method
    end
  end
end

foo # this is an inline comment
bar # this is another inline comment

[
  # these are comments
  # inside of an array
  foo,
  # inside of an array
  bar
]

{
  foo:
    # these are comments
    'bar',
  bar:
    # inside of a hash
    'baz'
}

foo # inline comment inside of a dot
  .bar

Foo.where(foo: bar, bar: baz).to_a.find do |foo|
  # This is a comment
  foo.foo == bar.foo
end

# this is a comment
# at the end of the file
"
`;

exports[`defined.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third

# rubocop:enable Lint/Void
"
`;

exports[`defined.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

defined?(a) # first

defined?(a) # second

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(
  super_super_super_super_super_super_super_super_super_super_super_super_long
)

defined?(a) # third

# rubocop:enable Lint/Void
"
`;

exports[`embdoc.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

=begin
this is

some really

long documentation
that is contained
in an embdoc
=end

class Foo
=begin
this is an embdoc inside a class
=end
end

module Foo
  class Foo
=begin
this is an embdoc even more indented
=end
  end
end
"
`;

exports[`embdoc.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

=begin
this is

some really

long documentation
that is contained
in an embdoc
=end

class Foo
=begin
this is an embdoc inside a class
=end
end

module Foo
  class Foo
=begin
this is an embdoc even more indented
=end
  end
end
"
`;

exports[`hash.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

{}

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ :a => \\"a\\", :b => \\"b\\", :c => \\"c\\" }

{ Foo => 1, Bar => 2 }

{
  :super_super_super_super_super_super_super_super_long =>
    super_super_super_super_super_super_super_super_long,
  :super_super_super_super_super_super_super_super_super_long => {
    :super_super_super_super_super_super_super_super_long =>
      super_super_super_super_super_super_super_super_long
  }
}

foo :abc => true # some comment

foobar :alpha => alpha,
       :beta => beta,
       :gamma => gamma,
       :delta => delta,
       :epsilon => epsilon,
       :zeta => zeta
foobar(
  :alpha => alpha,
  :beta => beta,
  :gamma => gamma,
  :delta => delta,
  :epsilon => epsilon,
  :zeta => zeta
)

# rubocop:enable Lint/Void
"
`;

exports[`hash.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

{}

{ a: 'a', b: 'b', c: 'c' }

{ a: 'a', b: 'b', c: 'c' }

{ Foo => 1, Bar => 2 }

{
  super_super_super_super_super_super_super_super_long:
    super_super_super_super_super_super_super_super_long,
  super_super_super_super_super_super_super_super_super_long: {
    super_super_super_super_super_super_super_super_long:
      super_super_super_super_super_super_super_super_long
  }
}

foo abc: true # some comment

foobar alpha: alpha,
       beta: beta,
       gamma: gamma,
       delta: delta,
       epsilon: epsilon,
       zeta: zeta
foobar(
  alpha: alpha,
  beta: beta,
  gamma: gamma,
  delta: delta,
  epsilon: epsilon,
  zeta: zeta
)

# rubocop:enable Lint/Void
"
`;

exports[`hooks.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BeginBlock, Style/EndBlock

BEGIN { p \\"begin\\" }

BEGIN { p \\"begin\\" }

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END { p \\"end\\" }

END { p \\"end\\" }

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

# rubocop:enable Style/BeginBlock, Style/EndBlock
"
`;

exports[`hooks.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Style/BeginBlock, Style/EndBlock

BEGIN { p 'begin' }

BEGIN { p 'begin' }

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

BEGIN {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END { p 'end' }

END { p 'end' }

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

END {
  super_super_super_super_super_super_super_super_super_super_super_super_long
}

# rubocop:enable Style/BeginBlock, Style/EndBlock
"
`;

exports[`if.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  break # comment
end

if a

else
  b
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse
unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

if a
  1
end

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

unless a
  1
end

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2
if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  b 1
else
  b(2)
end

if a
  b(1)
else
  b 2
end
"
`;

exports[`if.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

if a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  break # comment
end

if a

else
  b
end

if a
  1
elsif b
  2
end

if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  1
elsif b
  2
elsif c
  3
else
  4
end

unless a
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

# rubocop:disable Style/UnlessElse
unless a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end
# rubocop:enable Style/UnlessElse

1 if a

if super_super_super_super_super_super_super_super_super_super_super_super_long
  1
end

1 unless a

unless super_super_super_super_super_super_super_super_super_super_super_suplong
  1
end

a ? 1 : 2

a ? 2 : 1

a ? 1 : 2
if a
  super_super_super_super_super_super_super_super_super_super_super_long
else
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

if a
  b 1
else
  b(2)
end

if a
  b(1)
else
  b 2
end
"
`;

exports[`kwargs.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

def add(alpha:, beta:, gamma: 1, delta: 2)
  alpha + beta + gamma + delta
end

add(:alpha => 1, :beta => 2, :gamma => 3, :delta => 4)

args = { :alpha => 1, :beta => 2, :gamma => 3 }
add(**args, :delta => 4)
"
`;

exports[`kwargs.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

def add(alpha:, beta:, gamma: 1, delta: 2)
  alpha + beta + gamma + delta
end

add(alpha: 1, beta: 2, gamma: 3, delta: 4)

args = { alpha: 1, beta: 2, gamma: 3 }
add(**args, delta: 4)
"
`;

exports[`lambda.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }
"
`;

exports[`lambda.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

-> { 1 }

->(a, b, c) { a + b + c }

lambda do
  super_super_super_super_super_super_super_super_super_super_super_super_long
end

lambda do |a, b, c|
  a + b + c + super_super_super_super_super_super_super_super_super_long
end

a.call(1, 2, 3)

a.call(1, 2, 3)

a[]

a[1, 2, 3]

->(a) { a }

-> { 1 }
"
`;

exports[`layout.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

1

def foobar
  2

  3
  4
  5

  6
end

7
8
9

10

# rubocop:enable Lint/Void
"
`;

exports[`layout.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

1

def foobar
  2

  3
  4
  5

  6
end

7
8
9

10

# rubocop:enable Lint/Void
"
`;

exports[`method.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:disable Metrics/ParameterLists

# rubocop:disable Style/MethodDefParentheses
# We should handle this by placing parentheses around the arguments.

def foo; end

def foo(); end

def foo(alpha); end

def foo(alpha); end

def self.foo; end

def self.foo(); end

def self.foo(alpha); end

def self.foo(alpha); end

def foo(alpha, beta, *gamma, delta, epsilon:, zeta:, eta: 1, **theta, &block)
  \\"what\\"
end

def foo(alpha)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(:h => 1, **bar)
foo(**bar, :h => 1)
foo(:h => 1, **bar, :i => 2)

Foo.foo

# rubocop:enable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:enable Metrics/ParameterLists, Style/MethodDefParentheses
"
`;

exports[`method.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:disable Metrics/ParameterLists

# rubocop:disable Style/MethodDefParentheses
# We should handle this by placing parentheses around the arguments.

def foo; end

def foo(); end

def foo(alpha); end

def foo(alpha); end

def self.foo; end

def self.foo(); end

def self.foo(alpha); end

def self.foo(alpha); end

def foo(alpha, beta, *gamma, delta, epsilon:, zeta:, eta: 1, **theta, &block)
  'what'
end

def foo(alpha)
  1
end

def foo(*); end

def foo(**); end

foo

foo(1)
foo(1, 2)
foo(1, 2, *abc)
foo(1, 2, *abc, 3, 4)

foo(*bar)
foo(**baz)
foo(&block)

foo(*bar, &block)
foo(**baz, &block)
foo(*bar, **baz, &block)

foo(h: 1, **bar)
foo(**bar, h: 1)
foo(h: 1, **bar, i: 2)

Foo.foo

# rubocop:enable Lint/DuplicateMethods, Lint/UnusedMethodArgument
# rubocop:enable Metrics/ParameterLists, Style/MethodDefParentheses
"
`;

exports[`next.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

[].each do
  next
end

[].each do
  next 1
end

[].each do
  next 1
end
"
`;

exports[`next.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

[].each do
  next
end

[].each do
  next 1
end

[].each do
  next 1
end
"
`;

exports[`numbers.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb
0o377
-0b1010
0b001_001
\\"a\\" # these are CHARs
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

# rubocop:enable Lint/Void
"
`;

exports[`numbers.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

123
-123
1_123
-543
123_456_789_123_456_789
123.45
1.2e-3
0xaabb
0o377
-0b1010
0b001_001
'a' # these are CHARs
?\\\\C-a
?\\\\M-a
?\\\\M-\\\\C-a

# rubocop:enable Lint/Void
"
`;

exports[`ranges.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`ranges.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/UselessAssignment

dot2 = 1..2 # dot2
dot3 = 3...4 # dot3

# rubocop:enable Lint/UselessAssignment
"
`;

exports[`regexp.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

/abc/

%r{a/b/c}

/abc/

/abc/

/abc/

/abc/

/a#{b}c/

/abc/

/abc/

/#{$&}/

# rubocop:enable Lint/Void
"
`;

exports[`regexp.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

/abc/

%r{a/b/c}

/abc/

/abc/

/abc/

/abc/

/a#{b}c/

/abc/

/abc/

/#{$&}/

# rubocop:enable Lint/Void
"
`;

exports[`rescue.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

begin
  1
rescue ArgumentError
  retry
rescue NoMethodError => exception
  puts exception
  redo
rescue SyntaxError, NoMethodError
  2
rescue StandardError
  3
else
  4
ensure
  5
end

begin
  a
rescue StandardError
  nil
end
"
`;

exports[`rescue.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

begin
  1
rescue ArgumentError
  retry
rescue NoMethodError => exception
  puts exception
  redo
rescue SyntaxError, NoMethodError
  2
rescue StandardError
  3
else
  4
ensure
  5
end

begin
  a
rescue StandardError
  nil
end
"
`;

exports[`return.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

def foo
  if a
    return
  end
end

def bar
  if a
    return 1
  end
end

def baz
  if a
    return 1
  end
end

def qux
  if a
    return 1, 2
  end
end

def qax
  if a
    return foo :bar
  end
end
"
`;

exports[`return.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

def foo
  return if a
end

def bar
  return 1 if a
end

def baz
  return 1 if a
end

def qux
  return 1, 2 if a
end

def qax
  return foo :bar if a
end
"
`;

exports[`strings.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

\\"\\"

\\"abc\\"

\\"abc's\\"

\\"abc\\"

\\"#{abc} abc\\"

\\"abc #{de} fghi #{jkl} mno\\"

\\"abc\\" \\\\
  \\"def\\" \\\\
  \\"ghi\\"

\\"abc #{\\"abc #{abc} abc\\"} abc\\"

{ \\"a\\" => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

\`abc\`

\`
  super_super_super_super_super_super_super_super_super_super_super_super_su_long
\`

<<-HERE
This is a straight heredoc!
HERE

<<-HERE
This is another straight heredoc, this time with interpolation!
#{interpolation}
So interpolated right now.
HERE

abc = <<-HERE
This is a straight heredoc on an assign!
HERE

<<-PARENT
This is a straight heredoc!
#{<<-CHILD
Why do I do this
CHILD}
PARENT

<<~HERE
  This is a squiggly heredoc!
HERE

<<~HERE
    This is another squiggly heredoc, this time with interpolation!
    #{interpolation}
    So interpolated right now.
HERE

abc = <<~HERE
  This is a squiggly heredoc on an assign!
HERE

<<~PARENT
  This is a squiggly heredoc!
  #{<<~CHILD
      Why do I do this
    CHILD}
PARENT

<<-GRAND
#{\\"interpolated\\"}
<<~PARENT
  #{\\"more interpolated\\"}
    <<-CHILD
      #{\\"what is going on\\"}
    CHILD
  #{\\"more interpolated\\"}
PARENT
#{\\"interpolated\\"}
GRAND

\\"abc \\\\\\"abc\\\\\\" abc\\"

# rubocop:enable Lint/Void
"
`;

exports[`strings.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

# rubocop:disable Lint/Void

''

'abc'

\\"abc's\\"

'abc'

\\"#{abc} abc\\"

\\"abc #{de} fghi #{jkl} mno\\"

'abc' \\\\
  'def' \\\\
  'ghi'

\\"abc #{\\"abc #{abc} abc\\"} abc\\"

{ 'a' => 1 }

{ \\"a #{a}\\" => 1 }

:\\"abc#{abc}abc\\"

\`abc\`

\`
  super_super_super_super_super_super_super_super_super_super_super_super_su_long
\`

<<-HERE
This is a straight heredoc!
HERE

<<-HERE
This is another straight heredoc, this time with interpolation!
#{interpolation}
So interpolated right now.
HERE

abc = <<-HERE
This is a straight heredoc on an assign!
HERE

<<-PARENT
This is a straight heredoc!
#{<<-CHILD
Why do I do this
CHILD}
PARENT

<<~HERE
  This is a squiggly heredoc!
HERE

<<~HERE
    This is another squiggly heredoc, this time with interpolation!
    #{interpolation}
    So interpolated right now.
HERE

abc = <<~HERE
  This is a squiggly heredoc on an assign!
HERE

<<~PARENT
  This is a squiggly heredoc!
  #{<<~CHILD
      Why do I do this
    CHILD}
PARENT

<<-GRAND
#{'interpolated'}
<<~PARENT
  #{'more interpolated'}
    <<-CHILD
      #{'what is going on'}
    CHILD
  #{'more interpolated'}
PARENT
#{'interpolated'}
GRAND

'abc \\"abc\\" abc'

# rubocop:enable Lint/Void
"
`;

exports[`super.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

super

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`super.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

super

super 1

super(1)

super 1, 2

super(1, 2)
"
`;

exports[`while.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

while a
  1
end

while a
  1
end

while super_super_super_super_super_super_super_super_super_super_super_long
  1
end

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

until a
  1
end

until a
  1
end

until super_super_super_super_super_super_super_super_super_super_super_long
  1
end

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`while.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

1 while a

1 while a

1 while super_super_super_super_super_super_super_super_super_super_super_long

while super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end

1 until a

1 until a

1 until super_super_super_super_super_super_super_super_super_super_super_long

until super_super_super_super_super_super_super_super_super_super_super_supelong
  1
end
"
`;

exports[`yield.rb matches expected output for off.json 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;

exports[`yield.rb matches expected output for on.json 1`] = `
"# frozen_string_literal: true

[1, 2, 3].each do |i|
  yield

  yield i

  yield(i)

  yield i, 2

  yield(i, 2)

  yield
end
"
`;
